""" Creating a Simple Relational Database Video Notes 
    -> outline
        -> how to create a database using MySQL
        -> using MySQL workbench
        -> creating a schema
        -> creating database tables
        -> inserting new data
        -> applying primary and foreign keys
    -> creating a relational database in MySQL Workbench
    -> make the connection
        -> you can click on the + buttons
        -> 127.0.0.1 <- this is the hostname, the connection is hosted on our computer
        -> the port name is 33016 <- default for MySQL
        -> you can call the connection name whatever you want
        -> DON'T USE THE ROOT USER AS THE USERNAME IN THE REAL WORLD
        -> then store in keychain <- this is the password
        -> then testing the connection and seeing the success message
            -> MySQL has to be running on the machine
            -> it has to be to the correct connection
    -> this creates a new connection
        -> in the local MySQL installation
            -> there is sys and information schema
            -> socialDB <- he drops this database, to recreate it
    -> creating the database
        -> we want to create a database for a social media application
            -> users
            -> images
            -> posts
            -> users' friends
        -> right click > create schema > utf8-default
        -> MySQL Workbench ALLOWS YOU TO REVIEW THE SQL
            -> applying this change
        -> refresh the changes
        -> he expands SocialDB, right clicks and creates the Users table
            -> creating the UserID table
                -> this auto-increments
            -> the next column is for the name of the user
                -> we are setting a limit to the amount of characters
                -> NOT NULL MEANS THAT THE DATA IT CONTAINS HAS TO EXIST
                -> he also makes an email column
            -> then adding a date created column
                -> this contains timestamps
                -> its default value is the current timestamp
                -> when the element is updated, this changes
                -> APPLYING THESE CHANGES IN MYSQL WORKBENCH CREATES SQL, THAT IT SHOWS YOU
                    -> this shows the default values of different elements, the primary key and others
                    -> the auto-incrementing ID is used as the primary key
                    -> WE WANT DATA THAT DOES NOT CHANGE AS THE PRIMARY KEY
        -> we have the database, but there are no users
            -> then, adding three fields
                -> the userID and the date created are auto-created
            -> running this again shows the SQL
                -> this is in a certain order
                -> WE CAN EDIT THE SQL THAT RUNNING MYSQL WORKBENCH GIVES US
                -> then applying these changes
                -> APPLYING THE CHANGES IN MYSQL WORKBENCH EXECUTES THE SQL IT SHOWS YOU
            -> it has inserted a record into the database
    -> creating the images table
        -> COMMON STEPS
            -> HE TYPES IN INFORMATION IN MYSQL WORKBENCH
                -> THIS LOOKS LIKE A SPREADSHEET
            -> RUNNING THIS GENERATES SQL, THAT CAN BE EDITED
            -> THIS IS THEN APPLIED, WHICH WRITES THE TABLE
        -> he sets the default timestamp values to update
            -> looking through the SQL this has given us
    -> he then creates another table for the user's friends
        -> we are building out a database for a social media app
        -> we can put the user's ID in the table
            -> one:many relationship with friends
                -> every post has one author
                -> WE PUT THE FOREIGN KEY INSIDE THE TABLE
                    -> THIS IS A FOREIGN KEY
                    -> THE KEY INSIDE THE MAIN TABLE IS CALLED THE PRIMARY KEY
        -> WE CONNECT THE TABLES USING FOREIGN / PRIMARY KEYS
        -> he creates foreign keys
            -> the UserID, referencing the Users table
            -> the userID in the User's table
            -> IF A USER IS DELETED, THEN IT DELETES ALL ROWS ASSOCIATED WITH THIS IN THE USER TABLE
                -> THIS IS ON UPDATE DELETE CASCADE
                -> we can also do no action <- it will do nothing
                -> set null <- so it sets the record to null
                -> restrict <- so it doesn't delete the row
            -> THIS (IN MYSQL WORKBENCH) GENERATES SQL THAT WE CAN EDIT AND THEN APPLY
                -> he inspects this SQL
                    -> the UserID on the Posts table is linked by a constraint
        -> PostId, UserId, ImageId, User update
            -> each text has one author
                -> 1:1
        -> he creates the user's friends table
        -> HAVING A LOOKUP TABLE TO CONNECT USER ID'S TO THE ID'S OF THEIR FRIENDS IN THE TABLE
            -> in a large dataset (e.g Facebook), you would need a different RDBMS
                -> Cassandra
        -> then adding the foreign keys
            -> referencing the user's table
            -> cascading on update
            -> we want the reference that they have friends to be deleted, for example
            -> he is editing the database in the MySQL Workbench GUI
                -> this generates SQL, that is then applied
                -> we can then see these changes
        -> right clicking and selecting rows
            -> applying more changes
            -> YOU CAN QUERY THE DATABASE WITH SQL IN MYSQL WORKBENCH
        -> then creating posts
            -> he updates the database more
            -> this is in the MySQL Workbench GUI
            -> HE CREATES FRIENDS AND POSTS IN THE SOCIAL MEDIA DATABASE
            -> THE DATABASE IS FIRST CREATED, WITH TABLES, AND THEN THESE ARE POPULATED
        -> then setting up the foreign keys
            -> ImageID
            -> cascade twice
            -> applying these changes
    -> about what was just created
        ->  
"""