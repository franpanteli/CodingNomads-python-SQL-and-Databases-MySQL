""" MySQL Database Backup & Restore: MySQL Workbench Webpage Notes
    -> outline
        -> Introduction
        -> Why Database Backup & Restore is Critical
        -> MySQL Workbench Overview for Backup & Restore
        -> Running a Database Backup in MySQL Workbench
            -> Connecting to the Database
            -> Navigating to Data Export
            -> Selecting Databases and Schema Objects
            -> Export Options Explained
                -> Self-Contained File vs. Dump Project Folder
                -> Create Dump in a Single Transaction
                -> Include Create Schema
                -> Advanced Options (Lock Tables, Add Drop Statements)
            -> Executing the Export
            -> Monitoring Export Progress
            -> Verifying the Backup File
        -> Dropping a Database in MySQL Workbench
            -> Navigating to Schemas
            -> Drop Schema Procedure
            -> Confirming Deletion
            -> Safety Precautions
        -> Restoring / Importing a Database via Workbench
            -> Navigating to Data Import / Restore
            -> Selecting Import Source (Self-Contained vs. Folder)
            -> Target Schema Options
                -> Existing Schema vs. New Schema
                -> Schema Naming Conventions
            -> Start Import and Progress Monitoring
            -> Troubleshooting Common Import Errors
                -> Foreign Key Constraints
                -> Character Set / Collation Issues
                -> Large File Imports
        -> Verifying the Imported Database
            -> Refreshing the Schemas Tab
            -> Expanding Tables and Checking Data
            -> Running Sample Queries
            -> Ensuring Data Integrity
            -> Advanced Verification Tips (Counts, Checksums)
        -> Best Practices
            -> Regular Backup Schedule
            -> Storage & Versioning of Backup Files
            -> Testing Restores Periodically
            -> File Naming Conventions for Easy Identification
            -> Combining GUI and CLI Backups
            -> Preparing for Cloud / Remote Databases
        -> Common Pitfalls
            -> Forgetting Transactional Integrity
            -> Overwriting Active Databases
            -> Large Databases Causing Timeouts
            -> Misconfigured Import Options
        -> Summary

    -> MySQL Database Backup & Restore via Workbench
        -> Introduction
            -> Backup (Export) and Restore (Import) are essential for:
                -> Safeguarding data against accidental deletion or corruption
                -> Moving databases between environments (development, staging, production)
                -> Sharing datasets for collaboration
            -> MySQL Workbench provides a **GUI alternative** to command-line backups
            -> GUI allows visual selection of databases, tables, and detailed options
        -> Why Database Backup & Restore is Critical
            -> Data loss can occur due to:
                -> Human error (dropping tables, incorrect updates)
                -> Hardware failures (disk crash, server issues)
                -> Software bugs or corruption
            -> Backups allow you to:
                -> Restore lost or corrupted data quickly
                -> Test schema or queries without risking production data
                -> Maintain historical copies of data for auditing
        -> MySQL Workbench Overview
            -> MySQL Workbench integrates:
                -> Database connections
                -> Schema management
                -> Data export/import functionality
            -> Uses **self-contained SQL files** or **folder-based dumps** for backups
            -> Supports options for:
                -> Transactional integrity
                -> Schema recreation
                -> Advanced export configurations
        -> Running a Database Backup in MySQL Workbench
            -> Connecting to the Database
                -> Open MySQL Workbench
                -> Connect to "localhost" or your MySQL server
                -> Enter username/password if required
            -> Navigating to Data Export
                -> Click on "Management" tab in the left navigation
                -> Select "Data Export"
            -> Selecting Databases and Schema Objects
                -> Check the database you want to export (e.g., sakila)
                -> Check all tables, routines, views, triggers, etc.
                -> Ensure you understand which objects are being exported
            -> Export Options Explained
                -> **Self-Contained File:** Creates one SQL file containing all schema and data
                -> **Dump Project Folder:** Creates multiple files per table, routine, or object
                -> **Create Dump in a Single Transaction:** Ensures consistency if tables are transactional (InnoDB)
                -> **Include Create Schema:** Allows recreation of the database schema during import
                -> **Advanced Options:**
                    -> "Add DROP TABLE / SCHEMA statements" to prevent errors on import
                    -> "Lock Tables" option for consistent reads
            -> Executing the Export
                -> Choose the destination folder
                -> Click "Start Export"
                -> Wait for progress to complete
            -> Monitoring Export Progress
                -> MySQL Workbench shows real-time logs of exported tables
                -> Check for errors or skipped tables
            -> Verifying the Backup File
                -> Locate the SQL file or folder
                -> Open in a text editor to confirm schema and INSERT statements are present
        -> Dropping a Database in MySQL Workbench
            -> Navigate to the "Schemas" tab
            -> Right-click the database (e.g., sakila) → select "Drop Schema"
            -> Click "Drop Now" to confirm
            -> Safety Precautions:
                -> Ensure a backup exists before dropping
                -> Verify you are dropping the correct database
                -> Understand this is **permanent deletion**
        -> Restoring / Importing a Database via Workbench
            -> Navigating to Data Import / Restore
                -> Management → Data Import / Restore
            -> Selecting Import Source
                -> Self-Contained File: Single SQL file
                -> Dump Project Folder: Multiple SQL files
            -> Target Schema Options
                -> "New" schema for fresh restore
                -> "Existing" schema to overwrite (ensure proper backups)
                -> Naming conventions: avoid spaces or special characters
            -> Start Import and Monitor
                -> Click "Start Import"
                -> Monitor progress in log panel
            -> Troubleshooting Common Import Errors
                -> Foreign Key Constraint violations:
                    -> Use "Disable Foreign Key Checks" during import if necessary
                -> Character set / collation mismatch:
                    -> Ensure source and target charset match (utf8mb4 recommended)
                -> Large file imports:
                    -> Increase max_allowed_packet in MySQL config
                    -> Consider command-line import for very large datasets
        -> Verifying the Imported Database
            -> Refresh Schemas tab to ensure database appears
            -> Expand tables and inspect contents
            -> Right-click table → "Select Rows – Limit 1000" for spot check
            -> Run COUNT(*) on key tables to ensure expected row counts
            -> Optional: use checksums or scripts to compare with backup
        -> Best Practices
            -> Schedule **regular backups** (daily, weekly depending on data volatility)
            -> Store backups **securely and offsite** (cloud storage or network location)
            -> Test restores periodically to validate backups
            -> Use clear file naming conventions: <DB_NAME>_<YYYYMMDD>_<ENV>.sql
            -> Combine GUI Workbench backups with command-line automation for production
            -> For cloud-hosted databases (AWS RDS, GCP SQL), use their snapshot features
        -> Common Pitfalls
            -> Forgetting transactional integrity (not using "Single Transaction" option)
            -> Dropping the wrong database accidentally
            -> Import errors due to foreign keys, charset, or large files
            -> Not verifying data after restore
            -> Relying solely on GUI without testing backups
        -> Summary
            -> Backups (export) = safeguard against data loss
            -> Restore (import) = recover database or migrate to another environment
            -> Steps in MySQL Workbench:
                -> Backup: Management → Data Export → Select database → Export options → Start Export
                -> Drop: Schemas → Right-click → Drop Schema → Confirm
                -> Restore: Management → Data Import / Restore → Select file → Target schema → Start Import
                -> Verify: Schemas → Refresh → Expand tables → Select rows
            -> Key Points:
                -> Self-contained SQL file ensures full schema and data in one file
                -> Single transaction guarantees consistency
                -> Regular verification and offsite storage are essential
                -> GUI simplifies process but understanding options is critical
"""